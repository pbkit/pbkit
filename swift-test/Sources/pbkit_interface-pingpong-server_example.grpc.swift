//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pbkit/interface-pingpong-server/example.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Pbkit_Pingpong_ExampleServiceClient`, then call methods of this protocol to make API calls.
public protocol Pbkit_Pingpong_ExampleServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pbkit_Pingpong_ExampleServiceClientInterceptorFactoryProtocol? { get }

  func pingPong(
    _ request: Pbkit_Pingpong_BB,
    callOptions: CallOptions?
  ) -> UnaryCall<Pbkit_Pingpong_BB, Pbkit_Pingpong_BB>

  func pingPong2(
    _ request: Pbkit_Pingpong_BB,
    callOptions: CallOptions?
  ) -> UnaryCall<Pbkit_Pingpong_BB, Pbkit_Pingpong_A>

  func pPingPPPong3(
    _ request: Pbkit_Pingpong_A,
    callOptions: CallOptions?
  ) -> UnaryCall<Pbkit_Pingpong_A, Pbkit_Pingpong_A>
}

extension Pbkit_Pingpong_ExampleServiceClientProtocol {
  public var serviceName: String {
    return "pbkit.pingpong.ExampleService"
  }

  /// Unary call to PingPong
  ///
  /// - Parameters:
  ///   - request: Request to send to PingPong.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pingPong(
    _ request: Pbkit_Pingpong_BB,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pbkit_Pingpong_BB, Pbkit_Pingpong_BB> {
    return self.makeUnaryCall(
      path: "/pbkit.pingpong.ExampleService/PingPong",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingPongInterceptors() ?? []
    )
  }

  /// Unary call to PingPong2
  ///
  /// - Parameters:
  ///   - request: Request to send to PingPong2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pingPong2(
    _ request: Pbkit_Pingpong_BB,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pbkit_Pingpong_BB, Pbkit_Pingpong_A> {
    return self.makeUnaryCall(
      path: "/pbkit.pingpong.ExampleService/PingPong2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingPong2Interceptors() ?? []
    )
  }

  /// Unary call to PPingPPPong3
  ///
  /// - Parameters:
  ///   - request: Request to send to PPingPPPong3.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pPingPPPong3(
    _ request: Pbkit_Pingpong_A,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pbkit_Pingpong_A, Pbkit_Pingpong_A> {
    return self.makeUnaryCall(
      path: "/pbkit.pingpong.ExampleService/PPingPPPong3",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePPingPPPong3Interceptors() ?? []
    )
  }
}

public protocol Pbkit_Pingpong_ExampleServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'pingPong'.
  func makePingPongInterceptors() -> [ClientInterceptor<Pbkit_Pingpong_BB, Pbkit_Pingpong_BB>]

  /// - Returns: Interceptors to use when invoking 'pingPong2'.
  func makePingPong2Interceptors() -> [ClientInterceptor<Pbkit_Pingpong_BB, Pbkit_Pingpong_A>]

  /// - Returns: Interceptors to use when invoking 'pPingPPPong3'.
  func makePPingPPPong3Interceptors() -> [ClientInterceptor<Pbkit_Pingpong_A, Pbkit_Pingpong_A>]
}

public final class Pbkit_Pingpong_ExampleServiceClient: Pbkit_Pingpong_ExampleServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Pbkit_Pingpong_ExampleServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the pbkit.pingpong.ExampleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pbkit_Pingpong_ExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Pbkit_Pingpong_ExampleV2serviceClient`, then call methods of this protocol to make API calls.
public protocol Pbkit_Pingpong_ExampleV2serviceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pbkit_Pingpong_ExampleV2serviceClientInterceptorFactoryProtocol? { get }
}

extension Pbkit_Pingpong_ExampleV2serviceClientProtocol {
  public var serviceName: String {
    return "pbkit.pingpong.ExampleV2service"
  }
}

public protocol Pbkit_Pingpong_ExampleV2serviceClientInterceptorFactoryProtocol {
}

public final class Pbkit_Pingpong_ExampleV2serviceClient: Pbkit_Pingpong_ExampleV2serviceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Pbkit_Pingpong_ExampleV2serviceClientInterceptorFactoryProtocol?

  /// Creates a client for the pbkit.pingpong.ExampleV2service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pbkit_Pingpong_ExampleV2serviceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Pbkit_Pingpong_ExampleServiceProvider: CallHandlerProvider {
  var interceptors: Pbkit_Pingpong_ExampleServiceServerInterceptorFactoryProtocol? { get }

  func pingPong(request: Pbkit_Pingpong_BB, context: StatusOnlyCallContext) -> EventLoopFuture<Pbkit_Pingpong_BB>

  func pingPong2(request: Pbkit_Pingpong_BB, context: StatusOnlyCallContext) -> EventLoopFuture<Pbkit_Pingpong_A>

  func pPingPPPong3(request: Pbkit_Pingpong_A, context: StatusOnlyCallContext) -> EventLoopFuture<Pbkit_Pingpong_A>
}

extension Pbkit_Pingpong_ExampleServiceProvider {
  public var serviceName: Substring { return "pbkit.pingpong.ExampleService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PingPong":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pbkit_Pingpong_BB>(),
        responseSerializer: ProtobufSerializer<Pbkit_Pingpong_BB>(),
        interceptors: self.interceptors?.makePingPongInterceptors() ?? [],
        userFunction: self.pingPong(request:context:)
      )

    case "PingPong2":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pbkit_Pingpong_BB>(),
        responseSerializer: ProtobufSerializer<Pbkit_Pingpong_A>(),
        interceptors: self.interceptors?.makePingPong2Interceptors() ?? [],
        userFunction: self.pingPong2(request:context:)
      )

    case "PPingPPPong3":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pbkit_Pingpong_A>(),
        responseSerializer: ProtobufSerializer<Pbkit_Pingpong_A>(),
        interceptors: self.interceptors?.makePPingPPPong3Interceptors() ?? [],
        userFunction: self.pPingPPPong3(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Pbkit_Pingpong_ExampleServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'pingPong'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingPongInterceptors() -> [ServerInterceptor<Pbkit_Pingpong_BB, Pbkit_Pingpong_BB>]

  /// - Returns: Interceptors to use when handling 'pingPong2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingPong2Interceptors() -> [ServerInterceptor<Pbkit_Pingpong_BB, Pbkit_Pingpong_A>]

  /// - Returns: Interceptors to use when handling 'pPingPPPong3'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePPingPPPong3Interceptors() -> [ServerInterceptor<Pbkit_Pingpong_A, Pbkit_Pingpong_A>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Pbkit_Pingpong_ExampleV2serviceProvider: CallHandlerProvider {
  var interceptors: Pbkit_Pingpong_ExampleV2serviceServerInterceptorFactoryProtocol? { get }
}

extension Pbkit_Pingpong_ExampleV2serviceProvider {
  public var serviceName: Substring { return "pbkit.pingpong.ExampleV2service" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

public protocol Pbkit_Pingpong_ExampleV2serviceServerInterceptorFactoryProtocol {
}
